---
layout: default
title: Warp
subtitle: Experimental public transport app
role: UI Design, HTML/CSS, Javascript
year: 2014
image: assets/thumbnails/warp.png
category: ui
---

h1(page-title). {{ page.title }}

h4(page-subtitle). {{ page.subtitle }}

!(page-header-img)/assets/thumbnails/warp.png(header image)!

<div class="text">

p(smallinfo). *Role:* {{ page.role }}
*Year:* {{ page.year }}

Warp is an experimental bus application I designed and built in collaboration with "Julian Sparber":http://julian.sparber.net for the Bolzano AngelHack at TIS Innovation Park in April of 2014.

h2. Idea

Our initial plan for the hackathon was to make some kind of app using local bus data from "Sasabus.org":http://sasabus.org/opendata and maybe exploring some interesting UI and interaction patterns.

While researching different public transport applications and websites we found that most of them are terribly inefficient both in terms of user input and displaying the connections. A typical user flow looks something like this:
# The user types the name of the departure stop
# The user types the name of the destination stop
# The user sets date
# The user sets time
# The user clicks the "search" button
# The results appear as a list of connections
# The user goes back and forth between various results to see the connection details and make comparisons
# The user chooses a connection

<figure class="with-caption">
  <img src="/beta/assets/sii.png" alt="Screenshot of the SII web interface">
  <figcaption>The <a href="http://www.sii.bz.it">South Tyrol public transport website</a> is a perfect example: clumsy inputs, unneccessarily complex UI and low information density in the search results.</figcaption>
</figure>

There are lots fundamental problems with this kind of approach (I won't go into detail, but if you're interested you should read Bret Victor's excellent "Magic Ink":http://worrydream.com/MagicInk), and tackling all of them would've been way out of scope for our hackathon project. However, this got us thinking about what the real-world use cases for a public transport app are, and how we could approach the problem differently.
We reflected on our own usage of public transport, and discovered a number of interesting things:
* Most search queries we use public transport apps for are pretty simple (e.g. _"I want to get to the train station right now"_)
* These apps are most useful on mobile devices, where typing is slow
* Most trips are relatively short (~15min max)
* Most of the time, we don't want connections with changes, we just want to get there in one trip
* In most cases we know where our destination is geographically, but we often don't know street names, let alone stop names in the area

Though these are mostly subjective observations, we were excited about improving the experience for this specific use case, because it was what we wanted for ourselves.

h2. Design

Once we started thinking about it in a more concrete way it became clear that we could improve the experience for core use cases significantly if we simply didn't support some of the non-core use cases at all.

For example, not supporting complicated routes with changes allowed us to completely cut the "choose a connection from this list" step from the process. Since all connections are direct, the only other variable is the departure time. And because the departure time is always the current time, we can simply show the user a list of the departure times from his stop and they'll have all the information they need.

This allowed us to simplify the user flow to this:

# The user chooses his destination stop on a map
# Stops that are connected to the destination are visually highlighted
# The user chooses one of the possible departure stop on the map
# The next few direct connections are displayed
# The user chooses a connection

<div>
  <img src="/beta/assets/wide.png" alt="" />
</div>

The map shows the user's position and all of the stops in the area. Tapping one of them sets it as the destination.

<div>
  <img src="/beta/assets/wide.png" alt="" />
</div>

Once a destination is chosen, the app determines from which stops the destination can be reached directly and shows only those.
Users can now see on the map which of these stops are closest to them and choose the one they want as their departure stop.

<div>
  <img src="/beta/assets/wide.png" alt="" />
</div>

When users click on a departure stop, the app shows a list of the next connections to the destination.

h2. Development

We implemented our hackathon app as a simple web app with a layout optimized for mobile (though it works on larger screens as well).
We used "Openstreetmap":http://openstreetmap.org/ and "Stamen Design's "Toner" tileset":http://maps.stamen.com/toner for the map and the OpenSASA dataset and API for the bus data.

Here's a screenshot:

<div>
  <img src="/beta/assets/wide.png" alt="" />
</div>

h2. Branding

When it came to naming and branding the app, we wanted something simple and concise that communicates the speed and simplicity of the experience. We brainstormed a lot of names but finally chose _Warp_, because it was short, simple and communicates not only speed but also the SciFi-like magic that comes with simplifying a complex process to a few simple simple steps.

h2. Result

You can try the app here.

Our code is free software and released under the GNU AGPL.
You can get the code on Github. There's also a design repo with mockups, icons and other stuff I created for the project.

</div>
